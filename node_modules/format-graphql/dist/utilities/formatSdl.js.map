{"version":3,"sources":["../../src/utilities/formatSdl.js"],"names":["sortSchema","key","value","options","sortArguments","sortDefinitions","sortFields","slice","sort","a","b","kind","name","localeCompare","schemaSdl","includes","Array","isArray","deep"],"mappings":";;;;;;;AAEA;;AACA;;AAIA;;;;AAGA,MAAMA,UAAU,GAAG,CAACC,GAAD,EAAMC,KAAN,EAAaC,OAAb,KAAsC;AACvD,QAAM;AACJC,IAAAA,aADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA;AAHI,MAIFH,OAJJ;;AAMA,MACEE,eAAe,IAAIJ,GAAG,KAAK,aAA3B,IACAK,UAAU,IAAIL,GAAG,KAAK,QADtB,IAEAG,aAAa,IAAIH,GAAG,KAAK,WAH3B,EAIE;AACA,WAAO,CACLA,GADK,EAELC,KAAK,CAACK,KAAN,GAAcC,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC3B,UAAID,CAAC,CAACE,IAAF,KAAW,kBAAf,EAAmC;AACjC,eAAO,CAAC,CAAR;AACD;;AAED,UAAID,CAAC,CAACC,IAAF,KAAW,kBAAf,EAAmC;AACjC,eAAO,CAAP;AACD;;AAED,aAAOF,CAAC,CAACG,IAAF,CAAOV,KAAP,CAAaW,aAAb,CAA2BH,CAAC,CAACE,IAAF,CAAOV,KAAlC,CAAP;AACD,KAVD,CAFK,CAAP;AAcD;;AAED,SAAO,CACLD,GADK,EAELC,KAFK,CAAP;AAID,CAhCD;;mBAkCgBY,S,EAAmBX,O,KAA0C;AAC3E,SAAO,oBAAM,qBAAU,oBAAMW,SAAN,CAAV,EAA4B,CAACb,GAAD,EAAMC,KAAN,KAAgB;AACvD,QAAI,CAAC,aAAD,EAAgB,QAAhB,EAA0B,WAA1B,EAAuCa,QAAvC,CAAgDd,GAAhD,KAAwDe,KAAK,CAACC,OAAN,CAAcf,KAAd,CAA5D,EAAkF;AAChF,aAAOF,UAAU,CAACC,GAAD,EAAMC,KAAN,EAAa,6BAAWC,OAAX,CAAb,CAAjB;AACD;;AAED,WAAO,CACLF,GADK,EAELC,KAFK,CAAP;AAID,GATY,EASV;AACDgB,IAAAA,IAAI,EAAE;AADL,GATU,CAAN,CAAP;AAYD,C","sourcesContent":["// @flow\n\nimport mapObject from 'map-obj';\nimport {\n  print,\n  parse,\n} from 'graphql';\nimport {getOptions} from './optionalize';\nimport type {OptionsType} from './optionalize';\n\nconst sortSchema = (key, value, options: OptionsType) => {\n  const {\n    sortArguments,\n    sortDefinitions,\n    sortFields,\n  } = options;\n\n  if (\n    sortDefinitions && key === 'definitions' ||\n    sortFields && key === 'fields' ||\n    sortArguments && key === 'arguments'\n  ) {\n    return [\n      key,\n      value.slice().sort((a, b) => {\n        if (a.kind === 'SchemaDefinition') {\n          return -1;\n        }\n\n        if (b.kind === 'SchemaDefinition') {\n          return 1;\n        }\n\n        return a.name.value.localeCompare(b.name.value);\n      }),\n    ];\n  }\n\n  return [\n    key,\n    value,\n  ];\n};\n\nexport default (schemaSdl: string, options?: $Shape<OptionsType>): string => {\n  return print(mapObject(parse(schemaSdl), (key, value) => {\n    if (['definitions', 'fields', 'arguments'].includes(key) && Array.isArray(value)) {\n      return sortSchema(key, value, getOptions(options));\n    }\n\n    return [\n      key,\n      value,\n    ];\n  }, {\n    deep: true,\n  }));\n};\n"],"file":"formatSdl.js"}